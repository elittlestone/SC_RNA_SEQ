---
title: "Single-cell RNA-seq Analysis"
subtitle: "Single-cell RNA-seq Analysis on GEO data for USF Bioinformatician Role"
format: 
  html:
    theme: cosmo
    code-fold: true
    toc: true
author: Ethan Littlestone
knitr: true
---

## Environment Setup/Package Installation

**I will be using Quarto, a super set of R Markdown for this Single-Cell RNA-seq Analysis. Quarto allows for the creation of detailed scientific reports (along with other formats like interactive web pages, dashboards, etc.) to help encourage collaboration and shareability of bioinformatics workflows.**

**Along with Quarto, I will be using the package manager *pixi* for further reproducibility, as well as the data workflow software *snakemake* for handling input/output and making the analysis clear and easy to follow.**

The following links give instructions for downloading/installing and using these helpful tools. 

[Quarto](https://quarto.org/docs/get-started/)

[Pixi](https://pixi.sh/latest/getting_started/)

[Snakemake](https://snakemake.readthedocs.io/en/stable/)

Once these tools are installed, the first step is to initialize a git repository for tracking file changes/updates and create a pixi environment.

```{bash Pixi/Git, eval = F, echo = T}
pixi init sc_rna_seq_analysis --channel conda-forge --channel bioconda
cd sc_rna_seq_analysis

git init
# Create a remote repository through github then add the remote repo
git add remote origin https://github.com/elittlestone/SC_RNA_SEQ
touch geo_single_cell_rna_analysis.qmd
git add geo_single_cell_rna_analysis.qmd
git commit -m "Adding quarto notebook to git repository"
git push origin main
```

**Adding necessary packages through pixi can be done as follows:**

```{bash Add Packages, eval = F, echo = T}
pixi add snakemake sra-tools scanpy anndata cellxgene
```

**For the rest of the analysis, our commands can either be run via pixi by doing: *pixi run 'executable'* or by launching a subshell with *pixi s* and running commands as normal.**

## Single-Cell RNA-seq Workflow

**As the 10x Genomics Cellranger Tutorial explains, Single-cell RNA seq analysis allows for :**

[What is CellRanger?](https://www.scdiscoveries.com/blog/knowledge/cellranger/#what-it-is)

  - Cell Type Identification: Researchers can classify and identify different cell types based on their unique gene expression profiles.
  
  - Cell state analysis: By comparing gene expression patterns, researchers can identify different cellular states, such as quiescent, activated, or differentiated cells.
  
  - Biomarker discovery: Cell Ranger can help identify genes specifically expressed in specific cell types or conditions, which can serve as potential biomarkers.
  
  - Differential gene expression analysis: Researchers can identify differentially expressed genes between different conditions or cell types, providing insights into molecular differences.
  
  - Cell Trajectory Analysis: By analyzing gene expression changes, researchers can infer cell developmental trajectories and transitions.


## Downloading Raw Sequencing Data

**Sratools is a suite of command-line tools that allows for the programmatic downloading of GEO data. This avoids having to download through the web and promotes reproducibility as well as error handling. Sratools comes with multiple programs, here we use the *fasterq-dump* command. Running fasterq-dump -h' after downloading sratools through pixi gives helpful instructions on how to use the tool as well as the variety of different flags/parameters that can be passed to this program. We use fasterq-dump in a snakemake script to download our rna-seq reads and convert them to fastq format (fasterq-dump handles the download and file format conversion for us).**


**I have also created a configuration file where we can store hard-coded values which can then be referenced via our snakefile. This makes the process highly resistant to errors consistent with hard-coding file names. From the email that Dr. Zhang sent me that brings us to a GEO page, I then found the SRR accession ID. Providing this SRR to the *fasterq-dump* program will then download the appropriate raw sequencing data.**

[Sratools](https://github.com/ncbi/sra-tools)
[Fastq-dump](https://rnnh.github.io/bioinfo-notebook/docs/fastq-dump.html)


```{bash Snakefile for Downloading SRA files, eval = F, echo = T}
snakefile="download_sra_files.smk"
cat $snakefile
```

```{bash Download SRA files with snakemake, eval = F}
snakemake -s download_sra_files.smk --cores 8 -p 
```

**We can also go to the SRA Web Page for this particular entry and find useful information about the sequencing experiment and runs. Again, we can get this meta data programmatically as well using *SRATools***

[Sequence Read Archive Web Page](https://trace.ncbi.nlm.nih.gov/Traces/?view=run_browser&page_size=10&acc=SRR30255722&display=metadata)

## Read Alignment and Transcript Quantification 

**Reads 1 and 2 are technical reads, while read 3 contains our actual transcript (Read 1 is the index for demultiplexing, read2 is the Unique Molecular Identifier or UMI + barcode).**

### The next step is to download our reference human transcriptome as well as the cellranger software tool from 10x genomics so we can align our raw reads and quantify them. 

[Download CellRanger](https://www.10xgenomics.com/support/software/cell-ranger/downloads#download-links)

  - Read Alignment: The raw sequencing data, which consists of short reads, is aligned to a reference genome using a suitable alignment algorithm. This step assigns reads to their respective genomic locations.
  - Barcode and UMI Processing: Each cell captured by the Chromium platform has a unique barcode and unique molecular identifier (UMI). It uses these barcodes and UMIs to find low-quality cells and identify reads originating from the same cell.
  - Transcript Counting: The aligned reads are then used to count the number of times each unique molecular identifier (UMI) appears for each gene. That helps in quantifying the gene expression levels in each cell.
  - Data Aggregation and Quality Control: The CellRanger pipeline aggregates the counts from all cells into a count matrix, representing each cellâ€™s gene expression profile. Quality control steps are applied to filter out low-quality cells and genes.
  - Normalization and Analysis: The CellRanger pipeline normalizes the count matrix to account for cell sequencing depth differences. Then, it applies differential gene expression analysis, dimensionality reduction (such as principal component analysis or t-SNE), and clustering methods to reveal patterns and relationships among cells.
  - Visualization: Scientists typically visualize the results using various tools that help them interpret and present their findings effectively. These tools include the BioTuring BBrowserX and the 10x Genomics Loupe Browser.



```{bash Download Transcriptome and Run CellRanger, eval = F, echo = T}
snakemake -s download_ref_and_run_cellranger.smk --cores 1 -p
```

**Cellranger is able to map our reads to the transcriptome and perform transcript quantification. The tool outputs an in-depth summary html file with detailed summary statistics.**

## ðŸ“Š Cell Ranger Summary: AL02

<iframe src="AL02_web_summary.html" width="100%" height="800px" style="border:none;"></iframe>

## ðŸ“Š Cell Ranger Summary: AL03

<iframe src="AL03_web_summary.html" width="100%" height="800px" style="border:none;"></iframe>

**In the 10x SC-RNA seq technology, each barcode corresponds to a droplet. Ideally, each droplet will contain one cell. However, it is also possible for two or more cells to end up in a droplet (doublet), or no cells (empty droplet). The knee-plots show how each barcode ranks in terms of how many total UMIs, which represent unique transcripts captured from each cell. Droplets with a sufficiently low UMI count are likely empty droplets, and Cellranger has a probabilistic model it uses to filter out these droplets and only keep 'real cells'. Our knee-plots show steep dropoffs, meaning there is a clear distinction between real cells and empty droplets.**

**The main output of Cellranger is a filtered gene-cell expression matrix; rows are genes, columns are cells, and values in the matrix represent the number of UMIs (transcript counts) for each gene in each cell. This count serves as a proxy for gene expression. This filtered .h5 matrix file can then be used for post-processing with software tools like Scanpy in python or Seurat in R. I will be using Scanpy.**


## Post-processing with Scanpy 

[Scanpy Tutorial](https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html)

**The first steps of analyzing our Cell Ranger output involve Quality Control (QC), which includes assessing cells with high mitochondrial gene counts. High mitochondrial RNA fraction often indicates stressed, dying, or damaged cells that were lysed prematurely before droplet encapsulation in the 10x Genomics workflow. These cells are commonly filtered out because their RNA profiles may be compromised and potentially contaminated with RNA from other lysed cells.**


```{bash Run Scanpy, eval = F, echo = T}
snakemake -s scanpy.smk --cores 1 -p
```


<iframe src="results/figures/violin_AL02.png" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/scatter_AL02.png" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/violin_AL03.png" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/scatter_AL03.png" width="100%" height="400px" style="border:none;"></iframe>

**The violin plots show the number of genes expressed in each cell, the total number of UMIs in each cell, and the percentage of mitochondrial UMIs/transcripts. For both samples, we see the majority of cells have ~1500 genes expressed, somewhere in the several thousand UMI range, and have very small proportions of mitochondrial RNA. The scatter plots just combine these QC metrics into one plot. I filtered the data to only keep cells that have a minimum of 100 genes expressed as well as removed genes which are found in less than 3 cells. **

### Doublet Detection

**Next, we want to perform doublet detection. Doublets are droplets which have two or more cells and can be detected via the scrublet method. From the scanpy documentation : "Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets"**


### Normalization 

**The next step is to normalize our gene expression values **


### Feature Selection

**Feature selection involves selecting only the most informativ genes for downstream analysis. We choose the 2000 most variable genes by **

<iframe src="results/figures/filter_genes_dispersion_AL03.png" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/filter_genes_dispersion_AL02.png" width="100%" height="400px" style="border:none;"></iframe>

### Dimensionality Reduction

**Dimensionality reduction **


<iframe src="results/figures/pca_AL03.pdf" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/pca_variance_ratio_AL03.pdf" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/pca_AL02.pdf" width="100%" height="400px" style="border:none;"></iframe>

<iframe src="results/figures/pca_variance_ratio_AL02.pdf" width="100%" height="400px" style="border:none;"></iframe>

### Nearest neighbor graph construction/visualization

**Nearest-neighbor graphs are **


### Clustering

**Leiden graph-clustering **

**The leiden graph-clustering **